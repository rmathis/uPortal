plugins {
    // Top level plugins
    id 'build-announcements'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.moowork.node' version '1.2.0'
    id 'net.researchgate.release' version '2.7.0'
    // Records all tasks in task graph, generates `build/reports/visteg.dot`
    // dot file can be converted to an image using graphviz. `dot -Tsvg -O -v visteg.dot`
    id 'cz.malohlava' version '1.0.3'

    // Sub project plugins
    id 'com.github.sherter.google-java-format' version '0.8' apply false
    id 'nebula.lint' version '10.4.2' apply false
    id 'net.ltgt.errorprone' version '0.0.13' apply false
}

description = "Apereo uPortal $version"

/*======== Dependency Management ========**/
repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

node {
    version = nodejsVersion
    download = true
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'
    apply plugin: 'idea'
    apply plugin: 'nebula.lint'
    apply plugin: 'groovy'
    apply plugin: 'codenarc'
    apply plugin: 'com.github.sherter.google-java-format'
    apply plugin: 'net.ltgt.errorprone'

    configurations {
        // Banned dependencies
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'commons-logging', module: 'commons-logging-api'
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }

    dependencies {
      errorprone 'com.google.errorprone:error_prone_core:2.3.3'
    }

    codenarc {
        toolVersion = '1.2.1'
        reportFormat = 'console'
    }

    // Version has to be set directly here, using a variable does not set Java compatability version
    sourceCompatibility = 1.8

    gradleLint.criticalRules = [
      'overridden-dependency-version',
      'dependency-parentheses',
      'dependency-tuple',
      'empty-closure',
      'duplicate-dependency-class'
    ]

    /*======== Static Analysis ========*/
    findbugs {
        toolVersion = '3.0.1'
        ignoreFailures = true
    }
    tasks.withType(FindBugs) {
        enabled = gradle.startParameter.taskNames.contains(it.name)
    }
    googleJavaFormat {
        toolVersion '1.7'
        options style: 'AOSP'
        exclude '**/generated-sources'
    }

    /*======== Aggregate Dependencies Report ========*/
    task dependenciesRecursive(type: DependencyReportTask) {
        group = 'Help'
        description = 'Provides a complete report on project dependencies;  use option (e.g.) --configuration compile to narrow'
    }

}

/*======== Child Projects ========*/
subprojects {

    /*======== Plugins ========*/
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'

    /*======== Dependency Management ========**/
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.easymock:easymock:${easymockVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "org.xmlunit:xmlunit-legacy:${xmlunitVersion}"
    }

    /* Release Management
     *
     * Based on Sonatype's guide for publishing w/ Gradle:  http://central.sonatype.org/pages/gradle.html
     */
    ext {
        publishingUsername = project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : ""
        publishingPassword = project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : ""
        publishingRepositoryUrl = project.hasProperty('ossrhUrl') ? project.getProperty('ossrhUrl') : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        publishingRepositoryUrlSnapshot = project.hasProperty('ossrhUrlSnapshot') ? project.getProperty('ossrhUrlSnapshot') : "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    signing {
        required { gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }
    tasks.withType(Javadoc) {
        // FIXME: Fix errors rather than supressing them
        failOnError = false
    }
    tasks.withType(Jar) {
        from(project.projectDir) {
            include "${rootDir}/LICENSE"
            into 'META-INF'
        }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives javadocJar, sourcesJar
    }
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: publishingRepositoryUrl) {
                    authentication(userName: publishingUsername, password: publishingPassword)
                }

                snapshotRepository(url: publishingRepositoryUrlSnapshot) {
                    authentication(userName: publishingUsername, password: publishingPassword)
                }

                pom.project {
                    name 'uPortal'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Enterprise open source portal built by and for the higher education community.'
                    url 'https://github.com/Jasig/uPortal'

                    scm {
                        connection 'scm:git@github.com:Jasig/uPortal.git'
                        url 'https://github.com/Jasig/uPortal'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            organization 'uPortal Developers'
                            organizationUrl 'https://github.com/Jasig/uPortal/graphs/contributors'
                        }
                    }
                }
            }
        }
    }
    afterReleaseBuild.dependsOn uploadArchives
}

/*
 * Configuration for the 'gradle-release' plugin (https://github.com/researchgate/gradle-release)
 */
release {
    tagTemplate = 'v${version}' // Looks like it should be a GString, but not necessary
    git {
        requireBranch = ''
    }
}


task jacocoAggregateReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = allprojects.test
    additionalSourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    reports {
        xml.enabled = true
        html.enabled = true
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoAggregateReport/jacocoAggregateReport.xml"
    sourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}
